/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.
 
 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
 // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void widthChanged(GTextField source, GEvent event) { //_CODE_:settingsWidth:458928:
  println("settingsWidth - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:settingsWidth:458928:

public void heightChanged(GTextField source, GEvent event) { //_CODE_:settingsHeight:571866:
  println("textfield2 - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:settingsHeight:571866:

public void debugToggled(GCheckbox source, GEvent event) { //_CODE_:useDebug:532320:
  println("useDebug - GCheckbox >> GEvent." + event + " @ " + millis());

  switch(event) {
  case SELECTED:
    usedDebugOverlays[0] = true;
    FPSShown.setVisible(true);
    DateTimeShown.setVisible(true);
    showOquadCalls.setVisible(true);
    showHandAndMod.setVisible(true);
    break;
  case DESELECTED:
    usedDebugOverlays[0] = false;
    FPSShown.setVisible(false);
    DateTimeShown.setVisible(false);
    showOquadCalls.setVisible(false);
    showHandAndMod.setVisible(false);
    break;
  }
  updateSettings();
} //_CODE_:useDebug:532320:

public void FPSToggled(GCheckbox source, GEvent event) { //_CODE_:FPSShown:706300:
  println("FPSShown - GCheckbox >> GEvent." + event + " @ " + millis());
  switch(event) {
  case SELECTED:
    usedDebugOverlays[1] = true;
    break;
  case DESELECTED:
    usedDebugOverlays[1] = false;
    break;
  }
  updateSettings();
} //_CODE_:FPSShown:706300:

public void dateToggled(GCheckbox source, GEvent event) { //_CODE_:DateTimeShown:813524:
  println("DateTimeShown - GCheckbox >> GEvent." + event + " @ " + millis());
  switch(event) {
  case SELECTED:
    usedDebugOverlays[2] = true;
    break;
  case DESELECTED:
    usedDebugOverlays[2] = false;
    break;
  }
  updateSettings();
} //_CODE_:DateTimeShown:813524:

public void showOquadCallsToggled(GCheckbox source, GEvent event) { //_CODE_:showOquadCalls:984718:
  println("checkbox1 - GCheckbox >> GEvent." + event + " @ " + millis());
  switch(event) {
  case SELECTED:
    usedDebugOverlays[3] = true;
    break;
  case DESELECTED:
    usedDebugOverlays[3] = false;
    break;
  }
  updateSettings();
} //_CODE_:showOquadCalls:984718:

public void showHandAndModToggled(GCheckbox source, GEvent event) { //_CODE_:showHandAndMod:453499:
  println("checkbox1 - GCheckbox >> GEvent." + event + " @ " + millis());
  switch(event) {
  case SELECTED:
    usedDebugOverlays[4] = true;
    break;
  case DESELECTED:
    usedDebugOverlays[4] = false;
    break;
  }
  updateSettings();
} //_CODE_:showHandAndMod:453499:

public void applyResolution(GButton source, GEvent event) { //_CODE_:resButton:200754:
  println("resButton - GButton >> GEvent." + event + " @ " + millis());
  if (event == GEvent.CLICKED) {
    int newWidth = width, newHeight = height;
    println("clicked");
    try {
      newWidth = int(settingsWidth.getText());
      newHeight = int(settingsHeight.getText());
    }
    catch(ClassCastException exception) { 
      println(exception);
    }
    finally {
      newWidth = max(newWidth, 260);
      newHeight = max(newHeight, 250);
      surface.setSize(newWidth, newHeight);
      settingsWidth.setText(""+width);
      settingsHeight.setText(""+height);
      update();
      updateSettings();
    }
  }
} //_CODE_:resButton:200754:

public void fulscreenToggled(GButton source, GEvent event) { //_CODE_:fullscreenButton:814120:
  println("fullscreenButton - GButton >> GEvent." + event + " @ " + millis());
  if (event == GEvent.CLICKED) {
    println("clicked");
    f = !f;
    update();
    updateSettings();
    settings.apply("current");
  }
} //_CODE_:fullscreenButton:814120:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI() {
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  settingsWidth = new GTextField(this, 30, 30, 120, 20, G4P.SCROLLBARS_NONE);
  settingsWidth.setText("854");
  settingsWidth.setLocalColorScheme(GCScheme.RED_SCHEME);
  settingsWidth.setOpaque(true);
  settingsWidth.addEventHandler(this, "widthChanged");
  settingsHeight = new GTextField(this, 30, 60, 120, 20, G4P.SCROLLBARS_NONE);
  settingsHeight.setText("480");
  settingsHeight.setLocalColorScheme(GCScheme.RED_SCHEME);
  settingsHeight.setOpaque(true);
  settingsHeight.addEventHandler(this, "heightChanged");
  useDebug = new GCheckbox(this, 30, 90, 138, 20);
  useDebug.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  useDebug.setText("enable debug info");
  useDebug.setOpaque(false);
  useDebug.addEventHandler(this, "debugToggled");
  FPSShown = new GCheckbox(this, 30, 120, 120, 20);
  FPSShown.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  FPSShown.setText("show FPS");
  FPSShown.setOpaque(false);
  FPSShown.addEventHandler(this, "FPSToggled");
  DateTimeShown = new GCheckbox(this, 30, 150, 130, 20);
  DateTimeShown.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  DateTimeShown.setText("display date time");
  DateTimeShown.setOpaque(false);
  DateTimeShown.addEventHandler(this, "dateToggled");
  showOquadCalls = new GCheckbox(this, 30, 180, 140, 20);
  showOquadCalls.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  showOquadCalls.setText("show oquad() calls");
  showOquadCalls.setOpaque(false);
  showOquadCalls.addEventHandler(this, "showOquadCallsToggled");
  showHandAndMod = new GCheckbox(this, 30, 210, 120, 20);
  showHandAndMod.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  showHandAndMod.setText("show seconds hand and mod");
  showHandAndMod.setOpaque(false);
  showHandAndMod.addEventHandler(this, "showHandAndModToggled");
  resButton = new GButton(this, 160, 30, 80, 50);
  resButton.setText("Apply resolution");
  resButton.addEventHandler(this, "applyResolution");
  fullscreenButton = new GButton(this, 160, 55, 80, 25);
  fullscreenButton.setText("Toggle fullscreen");
  fullscreenButton.addEventHandler(this, "fulscreenToggled");
}

// Variable declarations 
// autogenerated do not edit
GTextField settingsWidth; 
GTextField settingsHeight; 
GCheckbox useDebug; 
GCheckbox FPSShown; 
GCheckbox DateTimeShown; 
GCheckbox showOquadCalls; 
GCheckbox showHandAndMod; 
GButton resButton; 
GButton fullscreenButton; 
